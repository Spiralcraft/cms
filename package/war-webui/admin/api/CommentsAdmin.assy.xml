<rpc:DispatchHandler
  xmlns:rpc="class:/spiralcraft/servlet/rpc/"
  xmlns:t="class:/spiralcraft/task/"
  xmlns:cms="class:/spiralcraft/cms/meta/"
  xmlns:dt="class:/spiralcraft/data/task/"
  xmlns:swm="class:/spiralcraft/webapp/meta"
  xmlns:j="class:/java/lang/"
  xmlns:fn="class:/spiralcraft/lang/functions"
  xmlns:wt="class:/spiralcraft/webtraffic"
  >
  <debug>false
  </debug>
  <defaultHandler>
    <rpc:JsonHandler
      >
      <params>
        [#q] {
          offset:[@j:Integer]=0
          ,limit:[@j:Integer]
        }
      </params>
      <queryParams>offset
      </queryParams>
      <queryParams>limit
      </queryParams>
      <result>
        [*dt:Fetch{[@cms:BlogComment.list]}].()
          #{ { id:=..id 
             ,commenterId:=..commenterId
             , commentDate:=..commentDate
             , content:=..content 
             , displayName:=
               ..displayName!=null
               ?..displayName
               :[@swm:User].@forId(..commenterId).commonName
             , deleted:=..deleted
             , approved:=..approved
             , postTitle:=..post.title
             , commenterIP:=..commenterIP
             , flagged:=[@wt:IPInfo].@forIP(..commenterIP).flagged
             } 
           }.[*fn:Sort{`.commentDate`,true}]
          { 
            [q].limit!=null
            ?[.][[q].offset..([q].offset+[q].limit-1)]
            :.
          }      
      </result>
    
    </rpc:JsonHandler>
  
  </defaultHandler>
  <handlers>
    <rpc:JsonTaskHandler>
      <name>.expungeDeleted
      </name>
      <task>
        <dt:Transaction>
          <chain>
            <t:Eval>
              <x>[*dt:Fetch{[@cms:BlogComment.list],`.deleted==true`}].()
                  #{ .[*dt:Edit{ action:=`@tuple.delete()`}].() }
              </x>
            </t:Eval>
          </chain>
        </dt:Transaction>
      </task>
    </rpc:JsonTaskHandler>
    <rpc:DispatchHandler>
      <name>*
      </name>
      <contextX>
        [#commentsAdmin] 
          { 
            comment:=[@cms:BlogComment].@forId([rpc:Call].nextPath.firstElement())
            ,response:=`
              [commentsAdmin].comment
                {
                   { id:=..id 
                   ,commenterId:=..commenterId
                   , commentDate:=..commentDate
                   , content:=..content 
                   , displayName:=
                     ..displayName!=null
                     ?..displayName
                     :[@swm:User].@forId(..commenterId).commonName
                   , approved:=..approved
                   , deleted:=..deleted
                   , postTitle:=..post.title
                   , commenterIP:=..commenterIP
                   , flagged:=[@wt:IPInfo].@forIP(..commenterIP).flagged
                   } 
                 }            
            `
          }
      </contextX>
      <requireMapping>true
      </requireMapping>
      <defaultHandler>
        <rpc:JsonTaskHandler>
          <task>
            <t:Eval>
              <x>
                [commentsAdmin].response()
              </x>
            </t:Eval>
          </task>
        </rpc:JsonTaskHandler>
      </defaultHandler>
      <handlers>
        <rpc:JsonTaskHandler>
          <name>
            .approve
          </name>
          <task>
            <t:Eval>
              <contextX>
                [#p] 
                { approved:[@j:Boolean] 
                }
              </contextX>
              <x>
                ![rpc:Call].request.isPost()
                ?[rpc:Call].respond(422,"Method requires HTTP POST request")              
                :[p].approved==null
                ?[rpc:Call].respond(422,"Missing required value for [approved]")
                :@{[commentsAdmin].comment
                     =[commentsAdmin].comment
                       .[*dt:Edit{ action:=`.approved=[p].approved`}].()
                  ,[commentsAdmin].response()
                  }
              </x>
            </t:Eval>
          </task>
        </rpc:JsonTaskHandler>      
        <rpc:JsonTaskHandler>
          <name>
            .delete
          </name>
          <task>
            <t:Eval>
              <contextX>
                [#p] 
                { deleted:[@j:Boolean] 
                }
              </contextX>
              <x>
                ![rpc:Call].request.isPost()
                ?[rpc:Call].respond(422,"Method requires HTTP POST request")              
                :[p].deleted==null
                ?[rpc:Call].respond(422,"Missing required value for [deleted]")
                :@{[commentsAdmin].comment
                     =[commentsAdmin].comment
                       .[*dt:Edit{ action:=`.deleted=[p].deleted`}].()
                  ,[commentsAdmin].response()
                  }
              </x>
            </t:Eval>
          </task>
        </rpc:JsonTaskHandler>      
        <rpc:JsonTaskHandler>
          <name>
            .flagIP
          </name>
          <task>
            <t:Eval>
              <contextX>
                [#p] 
                { flagged:[@j:Boolean] 
                }
              </contextX>
              <x>
                ![rpc:Call].request.isPost()
                ?[rpc:Call].respond(422,"Method requires HTTP POST request")              
                :[p].flagged==null
                ?[rpc:Call].respond(422,"Missing required value for [flagged]")
                :@{ [p].flagged
                      ? @{ [@wt:IPInfo].@flag
                           ([commentsAdmin].comment.commenterIP
                           ,"admin"
                           ,"spammer"
                           ,""
                           )
                        ,null
                        }
                      : @{ [@wt:IPInfo].@unflag
                           ([commentsAdmin].comment.commenterIP
                           ,"admin"
                           ,"spammer"
                           )
                        ,null
                        }
                  ,[commentsAdmin].response()
                  }
              </x>
            </t:Eval>
          </task>
        </rpc:JsonTaskHandler>      
      </handlers>
    </rpc:DispatchHandler>
  </handlers>
</rpc:DispatchHandler>
